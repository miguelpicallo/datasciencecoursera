library(hydroGOF)
}
for (i in 1:10){
ns1 <- ns(x,df=i)
# par(mfrow=c(1,3))
# plot(cd4Data$time,ns1[,1]); plot(cd4Data$time,ns1[,2]); plot(cd4Data$time,ns1[,3])
lm1 <- lm(y ~ ns1)
summary(lm1)
# plot(cd4Data$time,cd4Data$cd4,pch=19,cex=0.1)
# points(cd4Data$time,lm1$fitted,col="blue",pch=19,cex=0.5)
print(i)
print(rmse(lm1$fitted,y))
}
if(!require(simpleboot)){
install.packages("simpleboot")
library(simpleboot)
}
data(airquality)
attach(airquality)
quantile(airquality$Wind,prob=0.75)
set.seed(883833)
fquantile75=function(data,indices){
return(as.numeric(quantile(data[indices],prob=0.75)))
}
result=one.boot(data=airquality$Wind,FUN=fquantile75,R=1000)
boot.ci(result)
sd(result$t-result$t0)
data(Cars93,package="MASS")
if(!require(tree)){
install.packages("tree")
library(tree)
}
f=as.formula(DriveTrain~Price+Type)
set.seed(7363)
ind1=sample(nrow(Cars93),replace=T)
ind2=sample(nrow(Cars93),replace=T)
ind3=sample(nrow(Cars93),replace=T)
tree1=tree(f,Cars93[ind1,])
f
Cars93[ind1,]
head(Cars93[ind1,])
tree1=tree(f,Cars93[ind1,])
tree1
print(tree1)
plot(tree1)
text(tree1)
library(knitr)
pandoc('a2.html'format='pdf')
pandoc('a2.html'mformat='pdf')
pandoc('a2.html',format='pdf')
library('manipulate')
install.packages('manipulate')
install.packages("manipulate")
library('manipulate')
library(manipulate)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(y~x)
summary(lm(y~x))
data(mtcars)
head(mtcars)
model=lm(mpg~wt,mtcars)
model=lm(mpg~wt,mtcars)
conf.int(model)
summary(model)
confint(model)
help(mtcars)
41.12-4.20*3
model
confint(model,'mpg')
confint(model,'wt')
confint(model,'wt')*2
mtcars&shortwt=mtcars$wt/2
mtcars$shortwt=mtcars$wt/2
model=lm(mpg~shortwt,mtcars)
confint(model)
lm(mpg~0,mtcars)
mtcars$mpg-mean(mtcars$mtcars)
mtcars$mpg-mean(mtcars$mpg)
model=lm(mpg~wt,mtcars)
t.test(model)
str(model)
sum((y-model$fittedvalues)^2)/sum((y-mean(y))^2)
sum((y-model$fitted.values)^2)/sum((y-mean(y))^2)
model$fitted.values
model=lm(mpg~wt,mtcars)
str(model)
model$fitted.values
y-model$fitted.values
y=mtcars$mpg
sum((y-model$fitted.values)^2)/sum((y-mean(y))^2)
sum(mpg~wt,mtcars)$fitted.values)
sum(mpg~wt,mtcars)$fitted.values))
sum(lm(mpg~wt,mtcars)$fitted.values)
sum(lm(mpg~wt,mtcars)$fitted.values)
str(model)
sum(lm(mpg~wt,mtcars)$residuals)
sum(lm(mpg~0+wt,mtcars)$residuals)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages('AppliedPredictiveModeling')
install.packages('caret')
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
head(AlzheimerDisease)
head(adData)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
install.packages('ggplot2')
install.packages("ggplot2")
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(ggplot2)
head(concrete)
qplot(concrete$CpmpressiveStrength,colour=FlyAsh)
qplot(concrete$CpmpressiveStrength,colour=concrete$FlyAsh,data)
qplot(1:nrows(concrete),concrete$CpmpressiveStrength,colour=concrete$FlyAsh,data)
qplot(1:nrow(concrete),concrete$CpmpressiveStrength,colour=concrete$FlyAsh,data)
qplot(1:nrow(concrete),CompressiveStrength,data=concrete,colour=FlyAsh,data)
qplot(1:nrow(concrete),CompressiveStrength,data=training,colour=FlyAsh,data)
qplot(1:nrow(concrete),CompressiveStrength,data=training,colour=FlyAsh,data)
qplot(1:nrow(training),CompressiveStrength,data=training,colour=FlyAsh,data)
training$FlyAshG=cut2(training$FlyAsh,3)
library(Hmisc)
install.packages('Hmisc')
training$FlyAshG=cut2(training$FlyAsh,3)
library(Hmisc)
training$FlyAshG=cut2(training$FlyAsh,3)
qplot(1:nrow(training),CompressiveStrength,data=training,colour=FlyAshG,data)
head(training)
training$FlyAshG=cut2(training$FlyAsh,cts=3,m=5)
training$FlyAshG=cut2(training$FlyAsh,cuts=3,m=5)
qplot(1:nrow(training),CompressiveStrength,data=training,colour=FlyAshG,data)
training$FlyAsh
max(training$FlyAsh)
training$FlyAshG=cut2(training$FlyAsh,g=4)
qplot(1:nrow(training),CompressiveStrength,data=training,colour=FlyAshG,data)
head(training)
qplot(1:nrow(training),CompressiveStrength,data=training,colour=BlastFurnaceSlag,data)
qplot(1:nrow(training),CompressiveStrength,data=training,colour=cut2(Water,g=4),data)
qplot(1:nrow(training),CompressiveStrength,data=training,colour=cut2(Water,g=3),data)
qplot(1:nrow(training),CompressiveStrength,data=training,colour=cut2(CoarseAggregate,g=3),data)
qplot(1:nrow(training),CompressiveStrength,data=training,colour=cut2(FineAggregate,g=3),data)
qplot(1:nrow(training),CompressiveStrength,data=training,colour=cut2(Cement,g=3),data)
hist(training$SuperPlasticizer)
hist(training$Superplasticizer)
min(training$Superplasticizer)
hist(log(training$Superplasticizer))
hist(log(training$Superplasticizer+1))
hist(training$Superplasticizer)
hist(log(training$Superplasticizer+1))
hist(concrete$Superplasticizer)
hist(training$Superplasticizer)
hist(testing$Superplasticizer)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
hist(concrete$Superplasticizer)
head(inTrain)
concrete[inTrain[1:5],]
head(training)
hist(mixtures$SuperPlazticizer)
hist(mixtures$Superplazticizer)
hist(mixtures$Superplasticizer)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
grep('IL',names(training))
names(training)[grep('IL',names(training))]
matrix=training[,grep('IL',names(training))]
matrix=matrix[,-13]
names(matrix)
preProc=preProcess(matrix,method='pca')
preProc[[1]]
preProc=preProcess(matrix,method='pca',pcaComp=2)
matrixPC=predict(preProc,training)
matrixPC=predict(preProc,matrix)
preProc=preProcess(matrix,method='pca')
matrixPC=predict(preProc,matrix)
preProc=preProcess(matrix,method='pca')
matrixPC=predict(preProc,matrix)
preProc=preProcess(matrix,method='pca',thres=0.9)
matrixPC=predict(preProc,matrix)
preProc=preProcess(matrix,method='pca',thresh=0.9)
matrixPC=predict(preProc,matrix)
head(matrixPC)
matrix.test=testing[,grep('IL',names(training))]
matrix.test=matrix.test[,-13]
head(diagnosis)
length(diagnosis)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)[grep('IL',names(training))]
matrix=training[,grep('IL',names(training))]
matrix=matrix[,-13]
matrix.test=testing[,grep('IL',names(training))]
matrix.test=matrix.test[,-13]
preProc=preProcess(matrix,method='pca',thresh=0.8)
matrixPC=predict(preProc,matrix)
matrixPC.test=predict(preProc,matrix.test)
matrixPC$diagnosis=diagnosis[inTrain]
matrixPC.test$diagnosis=diagnosis[-inTrain]
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(adData)[grep('IL',names(training))]
matrix=training[,c(grep('IL',names(training)),ncol(adData))]
matrix=adData[,c(grep('IL',names(training)),ncol(adData))]
names(adData)[grep('IL',names(adData))]
matrix=adData[,c(grep('IL',names(adData)),ncol(adData))]
head(adData)
head(matrix)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(adData)[grep('IL',names(adData))]
matrix=adData[,c(grep('IL',names(adData)),1)]
head(matrix)
matrix=matrix[,-13]
model1=train(training$diagnosis~.,method='glm',data=matrixPC)
install.packages('e1071')
library(e1071)
model1=train(training$diagnosis~.,method='glm',data=matrixPC)
confussionMatrix(testing$diagnosis,predict(model1,matrixPC.test))
confusionMatrix(testing$diagnosis,predict(model1,matrixPC.test))
model2=train(training$diagnosis~.,method='glm',data=training)
confusionMatrix(testing$diagnosis,predict(model2,testing))
model2=train(training$diagnosis~.,method='glm',data=training[,-1])
confusionMatrix(testing$diagnosis,predict(model2,testing[,-1]))
preProc=preProcess(matrix,method='pca',thresh=0.8)
matrixPC=predict(preProc,matrix)
matrixPC.test=predict(preProc,matrix.test)
matrixPC$diagnosis=diagnosis[inTrain]
matrixPC.test$diagnosis=diagnosis[-inTrain]
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)[grep('IL',names(training))]
matrix=training[,grep('IL',names(training))]
matrix=matrix[,-13]
matrix.test=testing[,grep('IL',names(training))]
matrix.test=matrix.test[,-13]
preProc=preProcess(matrix,method='pca',thresh=0.8)
matrixPC=predict(preProc,matrix)
matrixPC.test=predict(preProc,matrix.test)
matrixPC$diagnosis=diagnosis[inTrain]
matrixPC.test$diagnosis=diagnosis[-inTrain]
matrixPC=predict(preProc,matrix)
matrixPC.test=predict(preProc,matrix.test)
model1=train(training$diagnosis~.,method='glm',data=matrixPC)
confusionMatrix(testing$diagnosis,predict(model1,matrixPC.test))
37/40
a=c(140,138,150,148,135)
b=c(132,135,152,146,130)
c=b-a
t.test(c,alternative='two.sided')
440*0.74
250*0.76
data(mtcars)
~head(mtcars)
head(mtcars)
model=lm(mpg~cyl+wt)
model=lm(mpg~cyl+wt,data=mtcars)
str(mtcars)
data=mtcars
data$cyl=as.factor(data$cyl)
model=lm(mpg~cyl+wt,data)
model
model=lm(mpg~cyl,data)
model
model=lm(mpg~cyl+wt+cyl*wt,data)
model
model1=lm(mpg~cyl+wt,data)
model2=lm(mpg~cyl,data)
model3=lm(mpg~cyl+wt+cyl*wt,data)
summary(model1)
summary(model3)
anova(model1,model3)
model4=lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(model4)
head(data)
head(model4$fitted.valyes)
head(model4$fitted.values)
33.991      -6.411
33.991     -6.411      -4.256
33.991     -6.411*2.620/2      -4.256
33.991     -6.411*2.87/2      -4.256
33.991     -6.411*2.32/2
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
hatvalues(lm(y~x))
dfbeta(lm(y~x))
lm(y~x)
dffits(lm(y~x))
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
hatvalues(lm(y~x))
dfbeta(lm(y~x))
lm(y[1:4]~x[1:4])
lm(y~x)
plot(lm(y~x))
plot(lm(y~x))
plot(x,y)
line(lm(y~x))
lines(lm(y~x))
lines(lm(y~x)$fitted.values,x)
lm(y~x)$fitted.values
x
y
plot(x,lm(y~x)$fitted.values)
plot(x,y
)
plot(x,y
)
lines(x,lm(y~x)$fitted.values)
lines(x[1:4],lm(y[1:4]~x[1:4])$fitted.values)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
hatvalues(lm(y~x))
dfbeta(lm(y~x))
dffits(lm(y~x))
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
rm(list=ls())
invisible(gc())
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
model=train(train$Case~.,method='rpart',data=train)
model=train(train$Case~.,method='rpart',data=train)
inTrain = createDataPartition(segmentationOriginal$Case, p = 3/4)[[1]]
train=segmentationOriginal[inTrain,]
test=segmentationOriginal[-inTrain,]
set.seed(125)
model=train(train$Case~.,method='rpart',data=train)
plot(model$finalModel)
text(model$finalModel)
library(rattle)
install.packages('rattle')
plot(model)
fancyRpartPlot(model$finalModel)
library(rattle)
fancyRpartPlot(model$finalModel)
install.packages(rpart.plot)
install.packages(rpart.plot)
fancyRpartPlot(model$finalModel)
library(rpart)
library(rattle)
fancyRpartPlot(model$finalModel)
library(e1071)
library(rattle)
fancyRpartPlot(model$finalModel)
library(rpart.plot)
plot(model$finalModel)
text(model$finalModel)
heAD(TRAIN)
head(train)
model=rpart(train$Case~.,data=train)
plot(model)
text(model)
library(rpart.plot)
fit=model
par(xpd = TRUE)
plot(fit, compress = TRUE)
text(fit, use.n = TRUE)
set.seed(125)
model=train(train$Case~.,method='rpart',data=train)
fit=model
par(xpd = TRUE)
plot(fit, compress = TRUE)
text(fit, use.n = TRUE)
fit=model$finalModel
par(xpd = TRUE)
plot(fit, compress = TRUE)
text(fit, use.n = TRUE)
model
model$finalModel
head(train)
unique(train$Case)
inTrain = which(segmentationOriginal$Case=='Train')
train=segmentationOriginal[inTrain,]
test=segmentationOriginal[-inTrain,]
set.seed(125)
model=train(train$Class~.,method='rpart',data=train)
fit=model$finalModel
par(xpd = TRUE)
plot(fit, compress = TRUE)
text(fit, use.n = TRUE)
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
install.packages('pgmm')
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
7.26/6
library(devtools)
install_github('slidify','ramnathv')
### decomposition
install.packages('reshape2')
help(svm)
library(e1071)
help(svm)
a=c(0.05,0.4,0.08,0.04,0.1,0.1,0.23)
a
sum(a)
install.packages("swirl")
library(swirl)
swirl()
nxt()
plot(child~parent, galton)
plot(jitter(child,4) ~ parent,galton)
regrline <- lm(child ~ parent,
| galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summar(regrline)
exit()
bye()
log(100000)/log(2)
log(1000000)/log(2)
devtools::install_github('rstudio/shinyapps')
library(devtools)
devtools::install_github('rstudio/shinyapps')
install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
devtools::install_github('ramnathv/rCharts')
sessionInfo(9)
sessionInfo()
.liPaths()
.libPaths()
shinyapps::setAccountInfo(
name="miguelpicallo",
token="72D0CF1623AB0FDACA6F86A2B1A8AC57",
secret="OAEcwYCIyLJE1n63gfjPt49ZAQdoknFdnkKV9y4d")
library(shinyapp)
library(shinyapps)
install_github( repo = "shinyapps", username="rstudio" )
if (!require("devtools"))
install.packages("devtools")
devtools::install_github("rstudio/shinyapps")
find_rtools
find_rtools()
find_rtools()
install.packages('devtools')
find.package('devtools')
find_rtools()
find_rtools()
library(devtools)
find_rtools()
devtools::github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
setwd('C:/Users/miguel.picallo.cruz/Documents/personal/coursera/JH data science/dev data products')
library(shiny)
install.packages('shiny')
shinyapps::setAccountInfo(
name="miguelpicallo",
token="72D0CF1623AB0FDACA6F86A2B1A8AC57",
secret="OAEcwYCIyLJE1n63gfjPt49ZAQdoknFdnkKV9y4d")
deployApp()
runApp()
runApp()
library(shiny)
runApp()
deployApp()
